/***************************************************
* ReferenceStructs.swift
*
* THIS FILE IS AUTOGENERATED WITH EACH BUILD.
* DON'T WRITE ANYTHING IMPORTANT IN HERE!
****************************************************/

protocol Ref {
    associatedtype T
    var ptr : Ptr<T> { get set }
}

/************************
 * Entities.swift
 ************************/

struct RenderableRef : Ref {
    var ptr : Ptr<Renderable>

    var vertexCount : Int { get { return ptr.pointee.vertexCount } set(val) { ptr.pointee.vertexCount = val } }
    var vertexBuffer : RawPtr { get { return ptr.pointee.vertexBuffer } set(val) { ptr.pointee.vertexBuffer = val } }
    var boundingBox : Rect { get { return ptr.pointee.boundingBox } set(val) { ptr.pointee.boundingBox = val } }
    var boundingBoxBuffer : RawPtr { get { return ptr.pointee.boundingBoxBuffer } set(val) { ptr.pointee.boundingBoxBuffer = val } }
}

struct EntityBaseRef : Ref {
    var ptr : Ptr<EntityBase>

    var poolIndex : Int { get { return ptr.pointee.poolIndex } set(val) { ptr.pointee.poolIndex = val } }
    var renderableId : RenderableId { get { return ptr.pointee.renderableId } set(val) { ptr.pointee.renderableId = val } }
    var p : Vec2 { get { return ptr.pointee.p } set(val) { ptr.pointee.p = val } }
    var dP : Vec2 { get { return ptr.pointee.dP } set(val) { ptr.pointee.dP = val } }
    var rot : Float { get { return ptr.pointee.rot } set(val) { ptr.pointee.rot = val } }
    var dRot : Float { get { return ptr.pointee.dRot } set(val) { ptr.pointee.dRot = val } }
    var scale : Float { get { return ptr.pointee.scale } set(val) { ptr.pointee.scale = val } }
}

struct ShipRef : Entity, Ref {
    var ptr : Ptr<Ship>

    var entity : EntityBaseRef { get { return ptr.pointee.entity } set(val) { ptr.pointee.entity = val } }
    var alive : Bool { get { return ptr.pointee.alive } set(val) { ptr.pointee.alive = val } }
}

struct AsteroidRef : Entity, Ref {
    var ptr : Ptr<Asteroid>

    var entity : EntityBaseRef { get { return ptr.pointee.entity } set(val) { ptr.pointee.entity = val } }
    var size : Asteroid.AsteroidSize { get { return ptr.pointee.size } set(val) { ptr.pointee.size = val } }
}

struct LaserRef : Entity, Ref {
    var ptr : Ptr<Laser>

    var entity : EntityBaseRef { get { return ptr.pointee.entity } set(val) { ptr.pointee.entity = val } }
    var timeAlive : Float { get { return ptr.pointee.timeAlive } set(val) { ptr.pointee.timeAlive = val } }
    var lifetime : Float { get { return ptr.pointee.lifetime } set(val) { ptr.pointee.lifetime = val } }
    var alive : Bool { get { return ptr.pointee.alive } set(val) { ptr.pointee.alive = val } }
}



/************************
 * Renderer.swift
 ************************/

struct GameStateRef : Ref {
    var ptr : Ptr<GameState>

    var gameInitialized : Bool { get { return ptr.pointee.gameInitialized } set(val) { ptr.pointee.gameInitialized = val } }
    var world : WorldRef { get { return ptr.pointee.world } set(val) { ptr.pointee.world = val } }
    var zoneZone : MemoryZone { get { return ptr.pointee.zoneZone } set(val) { ptr.pointee.zoneZone = val } }
    var entityZone : MemoryZoneRef { get { return ptr.pointee.entityZone } set(val) { ptr.pointee.entityZone = val } }
    var assetZone : MemoryZoneRef { get { return ptr.pointee.assetZone } set(val) { ptr.pointee.assetZone = val } }
    var renderables : HashTableRef<RenderableId, RenderableRef> { get { return ptr.pointee.renderables } set(val) { ptr.pointee.renderables = val } }
}

struct WorldRef : Ref {
    var ptr : Ptr<World>

    var size : Size { get { return ptr.pointee.size } set(val) { ptr.pointee.size = val } }
    var entities : PoolRef<EntityBaseRef> { get { return ptr.pointee.entities } set(val) { ptr.pointee.entities = val } }
    var ship : ShipRef { get { return ptr.pointee.ship } set(val) { ptr.pointee.ship = val } }
    var asteroids : PoolRef<AsteroidRef> { get { return ptr.pointee.asteroids } set(val) { ptr.pointee.asteroids = val } }
    var lasers : CircularBufferRef<LaserRef> { get { return ptr.pointee.lasers } set(val) { ptr.pointee.lasers = val } }
}



/************************
 * DataStructures.swift
 ************************/

struct StaticArrayRef<T> : Ref {
    var ptr : Ptr<StaticArray<T>>

    var storage : Ptr<T> { get { return ptr.pointee.storage } set(val) { ptr.pointee.storage = val } }
    var maxCount : Int { get { return ptr.pointee.maxCount } set(val) { ptr.pointee.maxCount = val } }
    var count : Int { get { return ptr.pointee.count } set(val) { ptr.pointee.count = val } }
}

struct PoolRef<T> : Ref {
    var ptr : Ptr<Pool<T>>

    var storage : Ptr<T> { get { return ptr.pointee.storage } set(val) { ptr.pointee.storage = val } }
    var maxCount : Int { get { return ptr.pointee.maxCount } set(val) { ptr.pointee.maxCount = val } }
    var count : Int { get { return ptr.pointee.count } set(val) { ptr.pointee.count = val } }
    var occupiedMask : U64 { get { return ptr.pointee.occupiedMask } set(val) { ptr.pointee.occupiedMask = val } }
}

struct CircularBufferRef<T> : Ref {
    var ptr : Ptr<CircularBuffer<T>>

    var storage : Ptr<T> { get { return ptr.pointee.storage } set(val) { ptr.pointee.storage = val } }
    var maxCount : Int { get { return ptr.pointee.maxCount } set(val) { ptr.pointee.maxCount = val } }
    var count : Int { get { return ptr.pointee.count } set(val) { ptr.pointee.count = val } }
    var nextIndex : Int { get { return ptr.pointee.nextIndex } set(val) { ptr.pointee.nextIndex = val } }
}



/************************
 * AssetLoader.swift
 ************************/

struct BitmapRef : Ref {
    var ptr : Ptr<Bitmap>

    var width : Int { get { return ptr.pointee.width } set(val) { ptr.pointee.width = val } }
    var height : Int { get { return ptr.pointee.height } set(val) { ptr.pointee.height = val } }
    var stride : Int { get { return ptr.pointee.stride } set(val) { ptr.pointee.stride = val } }
    var pixels : U32Ptr { get { return ptr.pointee.pixels } set(val) { ptr.pointee.pixels = val } }
}



/************************
 * BitmapFont.swift
 ************************/

struct BitmapFontRef : Ref {
    var ptr : Ptr<BitmapFont>

    var baselineHeight : Float { get { return ptr.pointee.baselineHeight } set(val) { ptr.pointee.baselineHeight = val } }
    var chars : Ptr<BitmapChar> { get { return ptr.pointee.chars } set(val) { ptr.pointee.chars = val } }
    var bitmap : BitmapRef { get { return ptr.pointee.bitmap } set(val) { ptr.pointee.bitmap = val } }
}

struct BitmapCharRef : Ref {
    var ptr : Ptr<BitmapChar>

}



/************************
 * Renderable Type Ids
 ************************/

extension Ship {
  static var renderableId : RenderableId = 0x00533DBE4955149C
}

extension ShipRef {
  static var renderableId : RenderableId { get { return Ship.renderableId } }
}

extension Asteroid {
  static var renderableId : RenderableId = 0x46E7BAE6643F999B
}

extension AsteroidRef {
  static var renderableId : RenderableId { get { return Asteroid.renderableId } }
}

extension Laser {
  static var renderableId : RenderableId = 0x4B4CEA7204475CEB
}

extension LaserRef {
  static var renderableId : RenderableId { get { return Laser.renderableId } }
}

