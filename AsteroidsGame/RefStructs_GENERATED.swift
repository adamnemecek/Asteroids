/***************************************************
* ReferenceStructs.swift
*
* THIS FILE IS AUTOGENERATED WITH EACH BUILD.
* DON'T WRITE ANYTHING IMPORTANT IN HERE!
****************************************************/
class Ref<T> {
    var ptr : Ptr<T>
    init(referencing: inout T) {
        ptr = Ptr<T>(&referencing)
    }
    init(_ newPtr: Ptr<T>) {
        ptr = newPtr
    }
}

/************************
 * Entities.swift
 ************************/

class RenderableRef : Ref<Renderable> {
    var vertexCount : Int { get { return ptr.pointee.vertexCount } set(val) { ptr.pointee.vertexCount = val } }
    var vertexBuffer : RawPtr { get { return ptr.pointee.vertexBuffer } set(val) { ptr.pointee.vertexBuffer = val } }
    var boundingBox : Rect { get { return ptr.pointee.boundingBox } set(val) { ptr.pointee.boundingBox = val } }
    var boundingBoxBuffer : RawPtr { get { return ptr.pointee.boundingBoxBuffer } set(val) { ptr.pointee.boundingBoxBuffer = val } }
}

class EntityBaseRef : Ref<EntityBase> {
    var id : EntityId { get { return ptr.pointee.id } set(val) { ptr.pointee.id = val } }
    var renderableId : RenderableId { get { return ptr.pointee.renderableId } set(val) { ptr.pointee.renderableId = val } }
    var p : Vec2 { get { return ptr.pointee.p } set(val) { ptr.pointee.p = val } }
    var dP : Vec2 { get { return ptr.pointee.dP } set(val) { ptr.pointee.dP = val } }
    var rot : Float { get { return ptr.pointee.rot } set(val) { ptr.pointee.rot = val } }
    var dRot : Float { get { return ptr.pointee.dRot } set(val) { ptr.pointee.dRot = val } }
    var scale : Float { get { return ptr.pointee.scale } set(val) { ptr.pointee.scale = val } }
}

class ShipRef : EntityRef<Ship> {
    var alive : Bool { get { return ptr.pointee.alive } set(val) { ptr.pointee.alive = val } }
}

class AsteroidRef : EntityRef<Asteroid> {
    var asteroidLocator : BucketLocator { get { return ptr.pointee.asteroidLocator } set(val) { ptr.pointee.asteroidLocator = val } }
    var size : Asteroid.AsteroidSize { get { return ptr.pointee.size } set(val) { ptr.pointee.size = val } }
}

class LaserRef : EntityRef<Laser> {
    var timeAlive : Float { get { return ptr.pointee.timeAlive } set(val) { ptr.pointee.timeAlive = val } }
    var lifetime : Float { get { return ptr.pointee.lifetime } set(val) { ptr.pointee.lifetime = val } }
    var alive : Bool { get { return ptr.pointee.alive } set(val) { ptr.pointee.alive = val } }
}



/************************
 * Renderer.swift
 ************************/

class GameStateRef : Ref<GameState> {
    var gameInitialized : Bool { get { return ptr.pointee.gameInitialized } set(val) { ptr.pointee.gameInitialized = val } }
    var world : WorldRef { get { return ptr.pointee.world } set(val) { ptr.pointee.world = val } }
    var zoneZone : MemoryZone { get { return ptr.pointee.zoneZone } set(val) { ptr.pointee.zoneZone = val } }
    var entityZone : MemoryZoneRef { get { return ptr.pointee.entityZone } set(val) { ptr.pointee.entityZone = val } }
    var assetZone : MemoryZoneRef { get { return ptr.pointee.assetZone } set(val) { ptr.pointee.assetZone = val } }
    var renderables : HashTableRef<RenderableId, RenderableRef> { get { return ptr.pointee.renderables } set(val) { ptr.pointee.renderables = val } }
}

class WorldRef : Ref<World> {
    var size : Size { get { return ptr.pointee.size } set(val) { ptr.pointee.size = val } }
    var entities : BucketArrayRef<EntityBase> { get { return ptr.pointee.entities } set(val) { ptr.pointee.entities = val } }
    var ship : ShipRef { get { return ptr.pointee.ship } set(val) { ptr.pointee.ship = val } }
    var asteroids : BucketArrayRef<Asteroid> { get { return ptr.pointee.asteroids } set(val) { ptr.pointee.asteroids = val } }
    var lasers : CircularBufferRef<LaserRef> { get { return ptr.pointee.lasers } set(val) { ptr.pointee.lasers = val } }
}

class DebugStateRef : Ref<DebugState> {
    var initialized : Bool { get { return ptr.pointee.initialized } set(val) { ptr.pointee.initialized = val } }
    var simulating : Bool { get { return ptr.pointee.simulating } set(val) { ptr.pointee.simulating = val } }
    var simulationTimeFactor : Float { get { return ptr.pointee.simulationTimeFactor } set(val) { ptr.pointee.simulationTimeFactor = val } }
    var zoom : Float { get { return ptr.pointee.zoom } set(val) { ptr.pointee.zoom = val } }
    var font : BitmapFontRef { get { return ptr.pointee.font } set(val) { ptr.pointee.font = val } }
    var selectedEntityId : EntityId { get { return ptr.pointee.selectedEntityId } set(val) { ptr.pointee.selectedEntityId = val } }
}



/************************
 * DataStructures.swift
 ************************/

class StaticArrayRef<T> : Ref<StaticArray<T>> {
    var storage : Ptr<T> { get { return ptr.pointee.storage } set(val) { ptr.pointee.storage = val } }
    var maxCount : Int { get { return ptr.pointee.maxCount } set(val) { ptr.pointee.maxCount = val } }
    var count : Int { get { return ptr.pointee.count } set(val) { ptr.pointee.count = val } }
}

class PoolRef<T> : Ref<Pool<T>> {
    var storage : Ptr<T> { get { return ptr.pointee.storage } set(val) { ptr.pointee.storage = val } }
    var maxCount : Int { get { return ptr.pointee.maxCount } set(val) { ptr.pointee.maxCount = val } }
    var count : Int { get { return ptr.pointee.count } set(val) { ptr.pointee.count = val } }
    var occupiedMask : U64 { get { return ptr.pointee.occupiedMask } set(val) { ptr.pointee.occupiedMask = val } }
}

class CircularBufferRef<T> : Ref<CircularBuffer<T>> {
    var storage : Ptr<T> { get { return ptr.pointee.storage } set(val) { ptr.pointee.storage = val } }
    var maxCount : Int { get { return ptr.pointee.maxCount } set(val) { ptr.pointee.maxCount = val } }
    var count : Int { get { return ptr.pointee.count } set(val) { ptr.pointee.count = val } }
    var nextIndex : Int { get { return ptr.pointee.nextIndex } set(val) { ptr.pointee.nextIndex = val } }
}



/************************
 * AssetLoader.swift
 ************************/

class BitmapRef : Ref<Bitmap> {
    var width : Int { get { return ptr.pointee.width } set(val) { ptr.pointee.width = val } }
    var height : Int { get { return ptr.pointee.height } set(val) { ptr.pointee.height = val } }
    var stride : Int { get { return ptr.pointee.stride } set(val) { ptr.pointee.stride = val } }
    var pixels : U32Ptr { get { return ptr.pointee.pixels } set(val) { ptr.pointee.pixels = val } }
}



/************************
 * BitmapFont.swift
 ************************/

class BitmapFontRef : Ref<BitmapFont> {
    var baseline : Float { get { return ptr.pointee.baseline } set(val) { ptr.pointee.baseline = val } }
    var lineHeight : Float { get { return ptr.pointee.lineHeight } set(val) { ptr.pointee.lineHeight = val } }
    var chars : Ptr<BitmapChar> { get { return ptr.pointee.chars } set(val) { ptr.pointee.chars = val } }
    var bitmap : BitmapRef { get { return ptr.pointee.bitmap } set(val) { ptr.pointee.bitmap = val } }
}

class BitmapCharRef : Ref<BitmapChar> {
}



/************************
 * BucketArray.swift
 ************************/

class BucketArrayRef<T> : Ref<BucketArray<T>> {
    var zone : MemoryZoneRef { get { return ptr.pointee.zone } set(val) { ptr.pointee.zone = val } }
    var first : BucketRef<T> { get { return ptr.pointee.first } set(val) { ptr.pointee.first = val } }
    var last : BucketRef<T> { get { return ptr.pointee.last } set(val) { ptr.pointee.last = val } }
    var capacity : U64 { get { return ptr.pointee.capacity } set(val) { ptr.pointee.capacity = val } }
    var used : U64 { get { return ptr.pointee.used } set(val) { ptr.pointee.used = val } }
}

class BucketRef<T> : Ref<Bucket<T>> {
    var storage : Ptr<T> { get { return ptr.pointee.storage } set(val) { ptr.pointee.storage = val } }
    var used : U64 { get { return ptr.pointee.used } set(val) { ptr.pointee.used = val } }
    var occupiedMask : U64 { get { return ptr.pointee.occupiedMask } set(val) { ptr.pointee.occupiedMask = val } }
    var next : BucketRef<T> { get { return ptr.pointee.next } set(val) { ptr.pointee.next = val } }
}



/************************
 * Renderable Type Ids
 ************************/

extension Ship {
  static var renderableId : RenderableId = 0x00533DBE4955149C
}

extension ShipRef {
  static var renderableId : RenderableId { get { return Ship.renderableId } }
}

extension Asteroid {
  static var renderableId : RenderableId = 0x46E7BAE6643F999B
}

extension AsteroidRef {
  static var renderableId : RenderableId { get { return Asteroid.renderableId } }
}

extension Laser {
  static var renderableId : RenderableId = 0x4B4CEA7204475CEB
}

extension LaserRef {
  static var renderableId : RenderableId { get { return Laser.renderableId } }
}

