/***************************************************
* ReferenceStructs.swift
*
* THIS FILE IS AUTOGENERATED WITH EACH BUILD.
* DON'T WRITE ANYTHING IMPORTANT IN HERE!
****************************************************/

protocol Ref {
    associatedtype T
    var ptr : Ptr<T> { get set }
}

/************************
 * Entities.swift
 ************************/

struct ShipRef : EntityRef {
    var ptr : Ptr<Ship>

    var alive : Bool { get { return ptr.pointee.alive } set(val) { ptr.pointee.alive = val } }
}

struct AsteroidRef : EntityRef {
    var ptr : Ptr<Asteroid>

    var size : Asteroid.AsteroidSize { get { return ptr.pointee.size } set(val) { ptr.pointee.size = val } }
}

struct LaserRef : EntityRef {
    var ptr : Ptr<Laser>

    var timeAlive : Float { get { return ptr.pointee.timeAlive } set(val) { ptr.pointee.timeAlive = val } }
    var lifetime : Float { get { return ptr.pointee.lifetime } set(val) { ptr.pointee.lifetime = val } }
    var alive : Bool { get { return ptr.pointee.alive } set(val) { ptr.pointee.alive = val } }
}



/************************
 * Renderer.swift
 ************************/

struct GameStateRef : Ref {
    var ptr : Ptr<GameState>

    var gameInitialized : Bool { get { return ptr.pointee.gameInitialized } set(val) { ptr.pointee.gameInitialized = val } }
    var world : WorldRef { get { return ptr.pointee.world } set(val) { ptr.pointee.world = val } }
    var zoneZone : MemoryZone { get { return ptr.pointee.zoneZone } set(val) { ptr.pointee.zoneZone = val } }
    var entityZone : MemoryZoneRef { get { return ptr.pointee.entityZone } set(val) { ptr.pointee.entityZone = val } }
}

struct WorldRef : Ref {
    var ptr : Ptr<World>

    var size : Size { get { return ptr.pointee.size } set(val) { ptr.pointee.size = val } }
    var ship : ShipRef { get { return ptr.pointee.ship } set(val) { ptr.pointee.ship = val } }
    var asteroids : PoolRef<AsteroidRef> { get { return ptr.pointee.asteroids } set(val) { ptr.pointee.asteroids = val } }
    var lasers : CircularBufferRef<LaserRef> { get { return ptr.pointee.lasers } set(val) { ptr.pointee.lasers = val } }
}



/************************
 * DataStructures.swift
 ************************/

struct StaticArrayRef<T> : Ref {
    var ptr : Ptr<StaticArray<T>>

    var storage : Ptr<T> { get { return ptr.pointee.storage } set(val) { ptr.pointee.storage = val } }
    var maxCount : Int { get { return ptr.pointee.maxCount } set(val) { ptr.pointee.maxCount = val } }
    var count : Int { get { return ptr.pointee.count } set(val) { ptr.pointee.count = val } }
}

struct PoolRef<T> : Ref {
    var ptr : Ptr<Pool<T>>

    var storage : Ptr<T> { get { return ptr.pointee.storage } set(val) { ptr.pointee.storage = val } }
    var maxCount : Int { get { return ptr.pointee.maxCount } set(val) { ptr.pointee.maxCount = val } }
    var count : Int { get { return ptr.pointee.count } set(val) { ptr.pointee.count = val } }
    var occupiedMask : U64 { get { return ptr.pointee.occupiedMask } set(val) { ptr.pointee.occupiedMask = val } }
}

struct CircularBufferRef<T> : Ref {
    var ptr : Ptr<CircularBuffer<T>>

    var storage : Ptr<T> { get { return ptr.pointee.storage } set(val) { ptr.pointee.storage = val } }
    var maxCount : Int { get { return ptr.pointee.maxCount } set(val) { ptr.pointee.maxCount = val } }
    var count : Int { get { return ptr.pointee.count } set(val) { ptr.pointee.count = val } }
    var nextIndex : Int { get { return ptr.pointee.nextIndex } set(val) { ptr.pointee.nextIndex = val } }
}



